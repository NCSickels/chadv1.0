================================ Source Code Analysis 1 =================================
Flawfinder version 2.0.19, (C) 2001-2019 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 222
Examining BannerGrabberPhind.c

FINAL RESULTS:

BannerGrabberPhind.c:92:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range
  (CWE-190). If source untrusted, check both minimum and maximum, even if the
  input had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended).

ANALYSIS SUMMARY:

Hits = 1
Lines analyzed = 119 in approximately 0.00 seconds (41294 lines/second)
Physical Source Lines of Code (SLOC) = 90
Hits@level = [0]  10 [1]   0 [2]   1 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]  11 [1+]   1 [2+]   1 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+] 122.222 [1+] 11.1111 [2+] 11.1111 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1

Not every hit is necessarily a security vulnerability.
You can inhibit a report by adding a comment in this form:
// flawfinder: ignore
Make *sure* it's a false positive!
You can use the option --neverignore to show these.

There may be other security vulnerabilities; review your code!
See 'Secure Programming HOWTO'
(https://dwheeler.com/secure-programs) for more information.



================================ Source Code Analysis 2 =================================
Flawfinder version 1.31, (C) 2001-2014 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 169
Examining banner_grabber.cpp

FINAL RESULTS:


ANALYSIS SUMMARY:

No hits found.
Lines analyzed = 118 in approximately 0.00 seconds (51171 lines/second)
Physical Source Lines of Code (SLOC) = 114
Hits@level = [0]   0 [1]   0 [2]   0 [3]   0 [4]   0 [5]   0
Hits@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Hits/KSLOC@level+ = [0+]   0 [1+]   0 [2+]   0 [3+]   0 [4+]   0 [5+]   0
Minimum risk level = 1
There may be other security vulnerabilities; review your code!
See 'Secure Programming for Linux and Unix HOWTO'
(http://www.dwheeler.com/secure-programs) for more information.



================================ Compiled Binary Analysis =================================
Flawfinder version 1.31, (C) 2001-2014 David A. Wheeler.
Number of rules (primarily dangerous function names) in C/C++ ruleset: 169
Examining phind_portscan
Error: File ended while in string.

FINAL RESULTS:

phind_portscan:199:  [4] (format) vwprintf:
  If format strings can be influenced by an attacker, they can be exploited
  (CWE-134). Use a constant for the format specification.
phind_portscan:199:  [4] (buffer) wcscat:
  Does not check for buffer overflows when concatenating to destination
  (CWE-120).
phind_portscan:199:  [4] (buffer) wcscpy:
  Does not check for buffer overflows when copying to destination (CWE-120).
  Consider using a function version that stops copying at the end of the
  buffer.
phind_portscan:199:  [4] (buffer) vswscanf:
  The scanf() family's %s operation, without a limit specification, permits
  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a
  different input function.
phind_portscan:199:  [4] (buffer) vswprintf:
  Does not check for buffer overflows (CWE-120). Use sprintf_s, snprintf, or
  vsnprintf.
phind_portscan:199:  [4] (buffer) vfwscanf:
  The scanf() family's %s operation, without a limit specification, permits
  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a
  different input function.
phind_portscan:199:  [4] (shell) system:
  This causes a new program to execute and is difficult to use safely
  (CWE-78). try using a library call that implements the same functionality
  if available.
phind_portscan:199:  [4] (buffer) vwscanf:
  The scanf() family's %s operation, without a limit specification, permits
  buffer overflows (CWE-120, CWE-20). Specify a limit to %s, or use a
  different input function.
phind_portscan:199:  [4] (format) vfwprintf:
  If format strings can be influenced by an attacker, they can be exploited
  (CWE-134). Use a constant for the format specification.
phind_portscan:199:  [3] (random) setstate:
  This function is not sufficiently random for security-related functions
  such as key and nonce creation (CWE-327). use a more secure technique for
  acquiring random values.
phind_portscan:199:  [3] (buffer) getenv:
  Environment variables are untrustable input if they can be set by an
  attacker. They can have any content and length, and the same variable can
  be set more than once (CWE-807, CWE-20). Check environment variables
  carefully before using them.
phind_portscan:199:  [3] (random) srand:
  This function is not sufficiently random for security-related functions
  such as key and nonce creation (CWE-327). use a more secure technique for
  acquiring random values.
phind_portscan:199:  [3] (tmpfile) tmpnam:
  Temporary file race condition (CWE-377).
phind_portscan:199:  [2] (tmpfile) tmpfile:
  Function tmpfile() has a security flaw on some systems (e.g., older System
  V systems) (CWE-377).
phind_portscan:199:  [2] (integer) atoi:
  Unless checked, the resulting number can exceed the expected range
  (CWE-190). If source untrusted, check both minimum and maximum, even if the
  input had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended).
phind_portscan:199:  [2] (integer) atol:
  Unless checked, the resulting number can exceed the expected range
  (CWE-190). If source untrusted, check both minimum and maximum, even if the
  input had no minus sign (large numbers can roll over into negative number;
  consider saving to an unsigned value if that is intended).
phind_portscan:199:  [2] (misc) fopen:
  Check when opening files - can an attacker redirect it (via symlinks),
  force the opening of special file type (e.g., device files), move things
  around to create a race condition, control its ancestors, or change its
  contents? (CWE-362).
phind_portscan:199:  [1] (buffer) wcsncat:
  Easily used incorrectly (e.g., incorrectly computing the correct maximum
  size to add) (CWE-120). Consider strcat_s, strlcat, or automatically
  resizing strings.
phind_portscan:199:  [1] (buffer) fgetc:
  Check buffer boundaries if used in a loop including recursive loops
  (CWE-120, CWE-20).
phind_portscan:199:  [1] (buffer) wcsncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for invalid
  pointers (CWE-120).
phind_portscan:199:  [1] (buffer) getchar:
  Check buffer boundaries if used in a loop including recursive loops
  (CWE-120, CWE-20).
phind_portscan:199:  [1] (buffer) wcslen:
  Does not handle strings that are not \0-terminated; if given one it may
  perform an over-read (it could cause a crash if unprotected) (CWE-126).

ANALYSIS SUMMARY:

Hits = 22
Lines analyzed = 226 in approximately 0.04 seconds (5867 lines/second)
Physical Source Lines of Code (SLOC) = 107
Hits@level = [0]   0 [1]   5 [2]   4 [3]   4 [4]   9 [5]   0
Hits@level+ = [0+]  22 [1+]  22 [2+]  17 [3+]  13 [4+]   9 [5+]   0
Hits/KSLOC@level+ = [0+] 205.607 [1+] 205.607 [2+] 158.879 [3+] 121.495 [4+] 84.1121 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!
See 'Secure Programming for Linux and Unix HOWTO'
(http://www.dwheeler.com/secure-programs) for more information.